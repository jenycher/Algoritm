#Алгоритм проверки на палиндром
#1 Удаление пробелов и преобразование к нижнему регистру:

#Преобразуем всю строку к нижнему регистру, чтобы избежать проблем с разницей в регистре.
#2 Удаляем все пробелы из строки, чтобы учитывать только буквенные и цифровые символы.
#Удаление всех неалфавитно-цифровых символов:
#Опционально можно удалить все символы, кроме букв и цифр, если рассматриваем только буквы и цифры для палиндрома.

#3 Сравнение строки с её обратной версией:
#Создаем обратную версию строки.
#Сравниваем исходную обработанную строку с её обратной версией.

#4 . Возврат результата:
#Если строка совпадает с её обратной версией, она является палиндромом.
#В противном случае строка не является палиндромом.

import re


def is_palindrome(s):
    """
    Проверяет, является ли строка палиндромом.

    :param s: Исходная строка.
    :return: True, если строка является палиндромом, иначе False.
    """
    # Приведение строки к нижнему регистру и удаление пробелов
    normalized_str = s.lower()

    # Удаление всех неалфавитно-цифровых символов
    normalized_str = re.sub(r'[^a-z0-9]', '', normalized_str)

    # Создание обратной версии строки
    reversed_str = normalized_str[::-1]

    # Сравнение строки с её обратной версией
    return normalized_str == reversed_str


# Примеры использования
print(is_palindrome("London"))  # False
print(is_palindrome("1-level-1"))  # True
print(is_palindrome("Hello, World!"))  # False
